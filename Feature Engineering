import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.impute import SimpleImputer
from sklearn.decomposition import PCA
from sklearn.pipeline import Pipeline

df = pd.read_csv('C:/Users/xxxx')
print(df.info())
print(df.describe())

imputer = SimpleImputer(strategy='mean')  
numeric_cols = df.select_dtypes(include=['float64', 'int64']).columns
df[numeric_cols] = imputer.fit_transform(df[numeric_cols])

scaler = StandardScaler()
df[numeric_cols] = scaler.fit_transform(df[numeric_cols])
df['velocity_difference'] = df['20%-perc. pairwise velocity'] - df['50%-perc. pairwise velocity']
df['velocity_x_duration'] = df['start $x$'] * df['stroke duration']
df['trajectory_distance_ratio'] = df['length of trajectory'] / df['direct end-to-end distance']

categorical_cols = df.select_dtypes(include=['object']).columns
encoder = OneHotEncoder(drop='first', sparse_=False)  
encoded_df = pd.DataFrame(encoder.fit_transform(df[categorical_cols]))

df_encoded = pd.concat([df, encoded_df], axis=1).drop(categorical_cols, axis=1)
pca = PCA(n_components=10) 
pca_components = pca.fit_transform(df_encoded)

pca_df = pd.DataFrame(pca_components, columns=[f'PC{i+1}' for i in range(pca_components.shape[1])])
df_final = pd.concat([df_encoded, pca_df], axis=1)

df_final.to_csv('C:/Users/xxx', index=False)
print(df_final.head())
